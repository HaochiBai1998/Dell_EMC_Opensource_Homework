import io.pravega.client.admin.ReaderGroupManager;
import io.pravega.client.admin.StreamManager;
import io.pravega.client.stream.EventStreamReader;
import io.pravega.client.stream.EventStreamWriter;
import io.pravega.client.stream.ScalingPolicy;
import io.pravega.client.stream.StreamConfiguration;

import java.io.*;
import java.net.URI;

public class FileSystem {
    protected EventStreamReader<String> fileReader;
    protected EventStreamWriter<String> fileWriter;
    protected ReaderGroupManager fileReaderGroupManager;
    protected String streamName;
    protected String fileName;
    protected String receiverID;
    protected String uploaderID;
    protected static String SCOPE_NAME = "FileSystemScope";
    protected static String URL = "tcp://127.0.0.1:9090";
    /**
     * @brief closeRead method will close all the created readers & reader groups,
     *        then close reader group manager.
     * */
    void closeRead(){
        fileReader.close();
        fileReaderGroupManager.deleteReaderGroup(uploaderID+"Group");
        fileReaderGroupManager.close();
    }

    /**
     * @brief closeWrite method will close all the created writer.
     * */
    void closeWrite(){
        fileWriter.close();
    }

    /**
     * @brief readFileData method will read most recently pushed string event from a stream,
     *        then write to an output stream by a fileEditor.
     * @param fileReader: a string event stream reader manages data reading.
     * @param fileEditor: an output stream writer manages file data writing.
     * */
    public void readFileData(EventStreamReader<String> fileReader,OutputStreamWriter fileEditor) throws Exception{
        String fileMessage="";
        while (true) {
            String event = fileReader.readNextEvent(1000).getEvent();
            if (event == null) {
                fileEditor.write(fileMessage);
                break;
            }
            fileMessage=event;
        }
    }
    /**
     * @brief readFileFromStream method will create a new file(if file exists, just write to this file),
     *        then read string data from a particular stream and write to your created file.
     * @param outputFileName: A string defines output file name.
     * */
    public void readFileFromStream(String outputFileName) throws Exception{
        OutputStream f=new FileOutputStream(outputFileName);
        OutputStreamWriter fileEditor = new OutputStreamWriter(f);
        readFileData(fileReader,fileEditor);
        fileEditor.close();
        f.close();
        closeRead();
        closeWrite();
    }
    /**
     * @brief writeFileToStream method will read data from a file as string,
     *        then push to a particular stream.
     * */
    public void writeFileToStream()throws Exception{
        InputStream f = new FileInputStream(fileName);
        String data=new String(f.readAllBytes());
        Writer.writeData(fileWriter,data);
        closeRead();
        closeWrite();
    }

    /**
     * @brief FileSystemInit method initialize all the parameters of FileSystem object.
     *
     * @param uploaderID: A String defines the file uploader ID.
     * @param receiverID: A String defines the file receiver ID.
     * @param fileName: A String defines the file name.
     * @param streamName: A String defines hashed stream name.
     * */
    public void init(String uploaderID,String receiverID,String fileName,String streamName)throws Exception{
        this.fileName=fileName;
        this.receiverID=receiverID;
        this.uploaderID=uploaderID;
        GroupChat.connectStream(URL,SCOPE_NAME,streamName);
        fileWriter = Writer.getWriter(URL,SCOPE_NAME,streamName);
        fileReaderGroupManager=Reader.createReaderGroup(SCOPE_NAME,streamName,URL,uploaderID+"Group");
        fileReader=Reader.createReader(URL,SCOPE_NAME,uploaderID,uploaderID+"Group");
    }

    /**
     * @brief hash method will generate a hashed stream name based on
     *        uploaderID,receiverID and fileName
     *
     * @param uploaderID: A String defines the file uploader ID.
     * @param receiverID: A String defines the file receiver ID.
     * @param fileName: A String defines the file name.
     * @return A String defines hashed stream name.
     * */
    String hash(String uploaderID,String receiverID,String fileName){
        return uploaderID.hashCode()+receiverID.hashCode()+fileName.hashCode()+"";
    }

    /**
     * @brief FileSystem object constructor will create a new stream for one to
     *        one file transfer. The stream name, which is generated by a hash
     *        function, is unique when uploaderID,receiverID or fileName is different.
     *
     * @param uploaderID: A String defines the file uploader ID.
     * @param receiverID: A String defines the file receiver ID.
     * @param fileName: A String defines the file name.
     * @return A String defines hashed stream name.
     * */
    public FileSystem(String uploaderID,String receiverID,String fileName)throws Exception{
        streamName=hash(uploaderID,receiverID,fileName);
        init(uploaderID,receiverID,fileName,streamName);
    }
}
